---
title: "Tutorial 3: Retrieving digital gender gaps estimates from DGG web API"
author: "Jiaxuan Li, Ridhi Kashyap"
date: "`r format(Sys.Date(), '%d %B %Y')`"
format: html
editor: visual
---

# Retrieving digital gender gaps estimates from DGG web API

In this part of the tutorial, we demonstrate how to access and retrieve digital gender gap indicators generated from the [Digital Gender Gaps projects](https://www.digitalgendergaps.org/) using our web API. This API provides a way to automate data requests for individual countries, specific dates, or bulk downloads.

```{r, message=FALSE}
## Uncomment below line if you haven't installed relevant packages 
# install.packages("tidyverse")
# install.packages("httr")
# install.packages("jsonlite")
# install.packages("countrycode")
# install.packages("sf")
# install.packages("rnaturalearth")
# install.packages("rnaturalearthdata")
# install.packages("cowplot")
# install.packages("scales")
# install.packages("ggpubr")

library(tidyverse)
library(httr)
library(jsonlite)
library(countrycode)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(scales)
library(ggpubr)
```

## 1 Retrieving national-level digital gender gaps (with dates)

### 1.1 Single country download

In this example, we request data for Côte d’Ivoire (country code: CIV) between January 2019 and January 2024. The API returns a nested JSON structure, where each entry is organized by date and contains multiple indicators (such as `mobile_men`, `internet_fm_ratio`, etc.), each with a predicted value and an associated error estimate.

To make this data usable for statistical analysis or visualization, we use R’s `purrr::map_dfr()` to flatten the nested list into a single data frame, where each row represents a unique combination of date and indicator.

```{r}
response <- GET(
  url = paste0("http://3.11.85.207/api/v2/download_national_data_with_dates"),
  query = list(
    start_date = "2019-01",
    end_date = "2024-01",
    country = "CIV"
  )
)

# Parse the response from the API as a list
data <- content(response, as = "parsed")

civ_df <- map_dfr(names(data), function(country) {
  country_data <- data[[country]]
  
  map_dfr(names(country_data), function(date) {
    indicators <- country_data[[date]]
    
    map_dfr(names(indicators), function(ind) {
      entry <- indicators[[ind]]
      
      data.frame(
        gid_0 = country,
        date = date,
        indicator = ind,
        predicted = if (!is.null(entry$predicted)) entry$predicted else NA,
        predicted_error = if (!is.null(entry$predicted_error)) entry$predicted_error else NA,
        stringsAsFactors = FALSE
      )
    })
  })
})

civ_df
```

### 1.2 Multiple countries download

In this section, we demonstrate how to automate the download and parsing process for multiple countries using R. Since we cannot directly pass a country-code vector to the argument, we will use a `for` loop to iterate over a vector of ISO3 country codes, send an API request for each one, and parse the nested JSON response into a tidy, unified data frame.

```{r}
# Vector of ISO3 country codes (countries that we are interested in)
countries <- c("AFG", "BRA", "COD", "FRA","IND", "JPN", "NGA", "SAU", "SWE","USA", "ZAF") 

# Initialize empty list to store all country results
all_data <- list()

# Loop through each country
for (code in countries) {
  
  # Make API request for each country
  response <- GET(
    url = "http://3.11.85.207/api/v2/download_national_data_with_dates",
    query = list(
      start_date = "2023-01",
      end_date = "2024-01",
      country = code
    )
  )
  
  # If request is successful
  if (status_code(response) == 200) {
    
    # Parse response as structured list
    data <- content(response, as = "parsed")
    
    # Check if data exists for the country
    if (!is.null(data[[code]])) {
      
      # Flatten JSON: loop over dates and indicators
      df <- map_dfr(names(data[[code]]), function(date) {
        indicators <- data[[code]][[date]]
        
        map_dfr(names(indicators), function(ind) {
          entry <- indicators[[ind]]
          
          data.frame(
            date = date,
            indicator = ind,
            predicted = if (!is.null(entry$predicted)) entry$predicted else NA,
            predicted_error = if (!is.null(entry$predicted_error)) entry$predicted_error else NA,
            gid_0 = code,
            stringsAsFactors = FALSE
          )
        })
      })
      
      all_data[[code]] <- df
      
    } else {
      warning(paste("No data for country:", code))
    }
    
  } else {
    warning(paste("Request failed for country:", code))
  }
}


selected_countries_df <- bind_rows(all_data)

selected_countries_df
```

### 1.3 Visualize internet gender gaps

In this section, we retrieve the internet female-to-male ratio for all available countries and visualize the results on a world map. By leaving the `country` parameter unspecified in the API query, we can download data for all available countries at once. 

```{r}
response <- GET(
  url = paste0("http://3.11.85.207/api/v2/download_national_data_with_dates"),
  query = list(
    start_date = "2025-01",
    end_date = "2025-01"    #Will return all countries if country is not specified
  )
)

# Parse the response from the API as a list
data <- content(response, as = "parsed")

# Note that we now have three levels instead of two: country → date → indicator 
world_data <- map_dfr(names(data), function(country) {
  country_data <- data[[country]]
  
  # Loop over all available dates for this country
  map_dfr(names(country_data), function(date) {
    indicators <- country_data[[date]]
    
    # Loop over all indicators (e.g., mobile_fm_ratio, internet_men)
    map_dfr(names(indicators), function(ind) {
      entry <- indicators[[ind]]
      
      # Always return a row, use NA for missing values
      data.frame(
        gid_0 = country,
        date = date,
        indicator = ind,
        predicted = if (!is.null(entry$predicted)) entry$predicted else NA,
        predicted_error = if (!is.null(entry$predicted_error)) entry$predicted_error else NA,
        stringsAsFactors = FALSE
      )
    })
  })
})

world_internet_ratio <- world_data %>%
  filter(indicator == "internet_fm_ratio")

# Get world map (as sf object)
world_sf <- ne_countries(scale = "medium", returnclass = "sf")

# Filter out Antarctica (this is optional)
world_sf <- world_sf %>% filter(iso_a3 != "ATA")

#Join with indicator data
world_map_data <- left_join(world_sf, world_internet_ratio, by = c("iso_a3" = "gid_0"))

ggplot(world_map_data) +
  geom_sf(aes(fill = predicted), color = "white", size = 0.1) +
  scale_fill_viridis_c(
    name = "Internet F/M Ratio",
    option = "plasma",
    na.value = "grey90"
  ) +
  labs(
    title = "Internet Female-to-Male Ratio by Country",
    subtitle = "January 2025",
  ) +
  theme_cowplot() +
  theme(
    legend.position = "bottom",
    legend.justification = "center",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )
```

## 2 Retrieving subnational-level digital gender gaps (with dates)

Having explored national-level digital gender gap estimates, we now turn to the subnational level to gain more granular insights within countries. In this section, we would download subnational DGG estimates from the web API. The subnational requests are very similar to those used for national data; however, there are some key differences to keep in mind:

1.  We would use a different URL.
2.  Use the argument `region` and GADM1 codes instead of `country`.argument.
3.  The response has a 4-level json structure: `country → region → date → indicator`

```{r}
response <- GET(
  url = paste0("http://3.11.85.207/api/v2/download_subnational_data_with_dates"),
  query = list(
    start_date = "2024-01",
    end_date = "2024-01",
    region = "AFG.10_1"
  )
)

data <- content(response, as = "parsed")

egy_df <- map_dfr(names(data), function(country) {
  country_data <- data[[country]]
  
  map_dfr(names(country_data), function(gadm1) {
    region_data <- country_data[[gadm1]]
    
    map_dfr(names(region_data), function(date) {
      indicators <- region_data[[date]]
      
      map_dfr(names(indicators), function(ind) {
        entry <- indicators[[ind]]
        
        data.frame(
          gid_0 = country,
          gid_1 = gadm1,
          date = date,
          indicator = ind,
          predicted = if (!is.null(entry$predicted)) entry$predicted else NA,
          predicted_error = if (!is.null(entry$predicted_error)) entry$predicted_error else NA,
          stringsAsFactors = FALSE
        )
      })
    })
  })
})

egy_df
```

## 3 Linking digital gender gap estimates with external data sources

It's possible to link digital gender gap estimates with external dataset using geographic identifier: ISO3 country code and GADM1 subnational unit code. We can study the substantive topics related to digital inequalities by doing this.

Firstly, we retrieve subnational dgg estimates for all countries with web API. Since parsing the response from API may take a long time, you can also directly read the file instead.

```{r}
##Read the file directly if parsing takes a long time, as we need subnational predictions for all years and all units.
##full_subantional <- read_csv("full_subnational_predictions.csv")

response <- GET(
  url = paste0("http://3.11.85.207/api/v2/download_subnational_data_with_dates"),
  query = list(
    start_date = "2015-01",
    end_date = "2025-01"
  )
)

data <- content(response, as = "parsed")

full_subantional <- map_dfr(names(data), function(country) {
  country_data <- data[[country]]
  
  map_dfr(names(country_data), function(gadm1) {
    region_data <- country_data[[gadm1]]
    
    map_dfr(names(region_data), function(date) {
      indicators <- region_data[[date]]
      
      map_dfr(names(indicators), function(ind) {
        entry <- indicators[[ind]]
        
        data.frame(
          gid_0 = country,
          gid_1 = gadm1,
          date = date,
          indicator = ind,
          predicted = if (!is.null(entry$predicted)) entry$predicted else NA,
          predicted_error = if (!is.null(entry$predicted_error)) entry$predicted_error else NA,
          stringsAsFactors = FALSE
        )
      })
    })
  })
})

##Calculate mean predictions for each year
int_ratio_subnational <- full_subantional %>%
  filter(indicator == "internet_fm_ratio") %>%
  mutate(year = as.numeric(substr(date, 1, 4))) %>%
  group_by(year, gid_0, gid_1, indicator) %>%
  summarise(mean_pred = mean(predicted, na.rm = T)) %>%
  ungroup()
```

Our team has prepared auxiliary datasets to support analysis of relationships between digital gender gaps and other subnational indicators. The first dataset, **`cgfr_10`**, provides the Cross-Gender Friendship Rate based on the top-10 friends identified in online social network data, brodied by the [Humanitarian Data Exchange](https://data.humdata.org/dataset/cross-gender-ties). The second dataset comprises selected [Demographic and Health Survey (DHS)](https://spatialdata.dhsprogram.com/data/#/) subnational indicators, including:

-   `EDEDUCWSEH`: Percentage of women with secondary or higher education

-   `EDLITRWLIT`: Percentage of women who are literate

-   `FPCUSMWMOD`: Percentage of currently married or in-union women currently using any modern method of contraception

-   `MAAAFMWM2B`: Median age at first marriage or union (in years) among women aged 25–49

Together, these datasets offer a chance for exploring the relationship between digital gender gaps and broader patterns of women's social network, empowerment and demographic behaviour. However, the DHS indicators are only available for countries that have conducted a DHS survey and have adopted GADM1 as their subnational administrative division. As a result, coverage may be limited and we have to be cautious on the generalizability of analytical results.

We combine dgg estimates and external data by GADM1 code:

```{r}
cgfr_data <- read_csv("cgfr_indicators.csv")

dhs_subnational <- read_csv("dhs_subantional_indicators.csv")

##As CGFR is unlikely to change substantially with time, we link them with the newest dgg estimates.
cgfr_analysis <- int_ratio_subnational %>%
  filter(year == 2025) %>%
  left_join(cgfr_data, by = "gid_1")

##DHS survey indicators are time-sensitive.
dhs_analysis <- int_ratio_subnational %>%
  left_join(dhs_subnational, by = c("gid_1" = "GID_1", "year" = "SVYYEAR")) %>%
  filter(!is.na(NAME_1))

```


### 3.1 Is internet gender gap related to woman's contraception use?

```{r, message=FALSE,warning=FALSE}
ggplot(dhs_analysis, aes(x = FPCUSMWMOD, y = mean_pred)) +
  geom_point(alpha = 0.7, color = "#54278f", size = 2) +
  geom_smooth(method = "lm", color = "#f768a1", se = TRUE) +
  stat_cor(method = "pearson", size = 4, label.y = 1.1) +
  labs(
    x = "Percentage of Women Using Modern Method of Contraception",  
    y = "Internet Female-to-Male Ratio"
  ) +
  theme_cowplot()
```

### 3.3 Exercise 1

1.  How can we retrieve **subnational female internet adoption levels** from the DGG web API?
2.  Which of the DHS subnational indicators appears to be most strongly associated with female internet adoption levels?
